@page "/Groups/Detail/{id:guid}"
@using ShearwellExercise.Interface
@using ShearwellExercise.Models
@inject IGroupDAL _groupDAL
@inject IAnimalForGroupDAL _animalForGroupDAL
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager
@rendermode InteractiveServer


<h3 class="mb-3">Group </h3>


@if (!_isLoading)
{
    <div class="row">
        <div class="col">
            Name: @_group.Name
        </div>
        <div class="col">
            Created On: @_group.DateTimeCreated
        </div>
    </div>

    <br />
    <br />


<MudDataGrid Items="@_group.AnimalForGroups" Filterable="false" SortMode="@SortMode.None" Groupable="false">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Animals</MudText>
        </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Animal.TagFormat" />
        <PropertyColumn Property="x => x.Animal.DateOfBirth" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error" @onclick="(() => Remove(context.Item))">Remove</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
}


@code {
    [Parameter]
    public Guid Id { get; set; }

    private Group _group;
    private bool _isLoading = true;
    private bool _isEditing = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await Load();
        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        _isLoading = true;
        _group = await _groupDAL.Get(Id);

        if (_group == null)
        {
            _snackbar.Add("Group not found", Severity.Error);
            _navigationManager.NavigateTo("/Groups");
        }

        _isLoading = false;

        StateHasChanged();

    }

    private async Task Remove(AnimalForGroup animalForGroup)
    {
        bool success = await _animalForGroupDAL.Delete(animalForGroup);

        if (success)
        {
            _snackbar.Add("Animal removed from group", Severity.Success);
            await Load();
        }

    }
}
